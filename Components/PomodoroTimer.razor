@using PomodoroApp.Services
@using BlazorBootstrap
@inject TimerSettingsService TimerService
@inject PomodoroTimerService PomodoroService
@implements IDisposable

@code {
    private int workTimeLeft;
    private int breakTimeLeft;
    private bool isRunning = false;
    private bool isWorkInterval = true;
    //Displays work or break times accordingly
    private string DisplayTime => $"{PomodoroService.TimeLeft / 60:D2}:{PomodoroService.TimeLeft % 60:D2}";
    private string DisplayWorkCyclesCompleted => $"{PomodoroService.CompletedCycles}";

    private void ResetWorkTime(){
        workTimeLeft = TimerService.WorkTimeMinutes * 60;
    }
    private void ResetBreakTime(){
        breakTimeLeft = TimerService.BreakTimeMinutes * 60;
    }

    private void ResetIntervals() {
        workTimeLeft = TimerService.WorkTimeMinutes * 60;
        breakTimeLeft = TimerService.BreakTimeMinutes * 60;
    }

    private async Task StartPauseTimer() 
    {
        if(PomodoroService.IsRunning) {
            PomodoroService.Pause();
        } else  
            PomodoroService.Start();
        
    }

    protected override void OnInitialized(){
        PomodoroService.OnTick += HandleTick;
        PomodoroService.OnMessageChanged += StateHasChanged;
    }

    public void Dispose(){
        PomodoroService.OnMessageChanged -= StateHasChanged;
    }

    private void HandleTick() {
        InvokeAsync(StateHasChanged);
    }
}


<div class="container text-center mt-5">
    <span>@PomodoroService.CurrentMessage</span>
    <h1 class="mb-3">Pomodoro Timer</h1>
    <h2 class="display-4">@DisplayTime</h2>
    <h3>Work cycles completed: @DisplayWorkCyclesCompleted</h3>
    <button class="btn btn-primary mt-3" @onclick="StartPauseTimer">
        @(PomodoroService.IsRunning ? "Pause" : "Start")
    </button>
    <Button class="btn btn-primary mt-3" @onclick="PomodoroService.Reset" TooltipTitle="Reset work session" TooltipPlacement="TooltipPlacement.Bottom">
        Reset</Button>
</div>
