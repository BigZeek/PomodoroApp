@using PomodoroApp.Services
@inject TimerSettingsService TimerService
@inject PomodoroTimerService PomodoroService

@code {
    private int workTimeLeft;
    private int breakTimeLeft;
    private bool isRunning = false;
    private bool isBreakTime = false;
    private bool isWorkInterval = true;
    //Displays work or break times accordingly
    private string DisplayTime => isWorkInterval
        ? $"{workTimeLeft / 60:D2}:{workTimeLeft % 60:D2}"
        : $"{breakTimeLeft / 60:D2}:{breakTimeLeft % 60:D2}";
    private int workTime = 25 * 60; // Set Default work time
    private int breakTime = 5 * 60; // Set default break time
    
    private void ResetWorkTime(){
        workTimeLeft = TimerService.WorkTimeMinutes * 60;
    }
    private void ResetBreakTime(){
        breakTimeLeft = TimerService.BreakTimeMinutes * 60;
    }
    private async Task StartPauseTimer() //Refactor to not reset on pause/restart
    {
        isRunning = !isRunning;
        
        while(isRunning){
            if(isWorkInterval){
                ResetWorkTime();
                while(isRunning && workTimeLeft > 0){
                    await Task.Delay(1000);
                    workTimeLeft--;
                    StateHasChanged();
                }
            }
            else {
                ResetBreakTime();
                while(isRunning && breakTimeLeft > 0){
                    await Task.Delay(1000);
                    breakTimeLeft--;
                    StateHasChanged();
                }
            }

        }

        isWorkInterval = !isWorkInterval;
    }

    protected override void OnInitialized(){

        PomodoroService.OnTick += HandleTick;
    }

    private void HandleTick() {
        InvokeAsync(StateHasChanged);
    }

}


<div class="container text-center mt-5">
    <h1 class="mb-3">Pomodoro Timer</h1>
    <h2 class="display-4">@DisplayTime</h2>
    <button class="btn btn-primary mt-3" @onclick="StartPauseTimer">
        @(isRunning ? "Pause" : "Start")
    </button>
</div>
